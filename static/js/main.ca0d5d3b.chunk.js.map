{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","api/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getAllPosts","a","fetch","response","json","getUserPosts","userId","getPostDetails","postId","Loader","className","PostsList","props","selectedUserId","selectedPostId","selectedPost","useState","posts","setPosts","loader","setLoader","useEffect","postsFromServer","map","post","title","type","onClick","id","NewCommentForm","onAdd","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","required","onChange","target","getPostComments","deleteComment","commentId","method","addComment","newComment","headers","JSON","stringify","PostDetails","setPost","comments","setComments","isHide","setIsHide","postFromServer","commentFromServer","createComment","newCommentsFromServer","removeComment","length","comment","getUsers","UserSelect","onSelect","users","setUsers","usersFromServer","user","App","setSelectedUserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca0d5d3b.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader/Loader';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPostId: number;\n  selectedPost: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, selectedPost } = props;\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    if (selectedUserId === 0) {\n      (async () => {\n        const postsFromServer = await getAllPosts();\n\n        setPosts(postsFromServer);\n        setLoader(false);\n      })();\n    } else {\n      (async () => {\n        const postsFromServer = await getUserPosts(selectedUserId);\n\n        setPosts(postsFromServer);\n        setLoader(false);\n      })();\n    }\n  }, [selectedUserId]);\n\n  if (loader) {\n    return <Loader />;\n  }\n\n  const handleClick = (id: number) => {\n    if (id !== selectedPostId) {\n      selectedPost(id);\n    } else {\n      selectedPost(0);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                {`User #${post.userId}`}\n              </b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleClick(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  onAdd: (newComment: Partial<Comment>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, onAdd } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    onAdd(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          required\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: Partial<Comment>) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loader, setLoader] = useState(true);\n  const [isHide, setIsHide] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    (async () => {\n      const postFromServer = await getPostDetails(selectedPostId);\n\n      setPost(postFromServer);\n      setLoader(false);\n    })();\n\n    (async () => {\n      const commentFromServer = await getPostComments(selectedPostId);\n\n      setComments(commentFromServer);\n      setLoader(false);\n    })();\n  }, [selectedPostId]);\n\n  const createComment = async (newComment: Partial<Comment>) => {\n    await addComment(newComment);\n\n    const newCommentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(newCommentsFromServer);\n  };\n\n  const removeComment = async (commentId: number) => {\n    await deleteComment(commentId);\n\n    const newCommentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(newCommentsFromServer);\n  };\n\n  const handleHide = () => {\n    setIsHide(!isHide);\n  };\n\n  return (\n    !loader ? (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          {post && post.title}\n        </section>\n\n        {comments.length > 0 && (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handleHide}\n            >\n              {isHide\n                ? `Hide ${comments.length} comments`\n                : `Show ${comments.length} comments`}\n            </button>\n            {isHide && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(comment.id);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              onAdd={createComment}\n            />\n          </div>\n        </section>\n      </div>\n    ) : (\n      <Loader />\n    )\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api/users';\n\ntype Props = {\n  onSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const UserSelect: React.FC<Props> = (props) => {\n  const { onSelect } = props;\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    })();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        onChange={onSelect}\n      >\n        {users.map(user => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect onSelect={handleChange} />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            selectedPost={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}